name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR with Maven
        run: |
          mvn -B clean package -DskipTests
          # The pom.xml has finalName=app, so the executable JAR is target/app.jar
          cp target/app.jar app.jar
          # Verify the JAR is executable
          echo "Verifying JAR file..."
          ls -la app.jar
          file app.jar
          java -jar app.jar --version 2>/dev/null || echo "JAR is ready for deployment"

      - name: Run tests (optional)
        run: mvn test
        continue-on-error: true

      - name: Decode EC2 SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY_B64 }}" | base64 -d > ec2-key.pem
          chmod 600 ec2-key.pem

      - name: Copy files to EC2 via SCP
        run: |
          scp -i ec2-key.pem -o StrictHostKeyChecking=no app.jar ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/
          scp -i ec2-key.pem -o StrictHostKeyChecking=no Dockerfile.ec2 ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/Dockerfile
          scp -i ec2-key.pem -o StrictHostKeyChecking=no docker-compose.yml ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/

      - name: Deploy to EC2
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user
            
            # Stop existing containers
            docker-compose down || true
            
            # Remove old images to force rebuild
            docker system prune -f || true
            
            # Start new containers
            docker-compose up --build -d
            
            # Wait a moment for containers to start
            sleep 10
            
            # Check container status
            docker ps
          EOF


      - name: Verify Swagger UI
        run: |
          echo "Testing Swagger UI accessibility..."
          if curl -fs "http://${{ secrets.EC2_HOST }}:8086/swagger-ui.html" > /dev/null; then
            echo "✅ Swagger UI is accessible at http://${{ secrets.EC2_HOST }}:8086/swagger-ui.html"
          else
            echo "⚠️ Swagger UI might not be accessible"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f ec2-key.pem
